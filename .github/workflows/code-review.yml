name: Code Review Agent CI/CD

on:
  pull_request:
    branches: [ main ]

jobs:
  review:
    runs-on: ubuntu-latest
    env:
      REVIEW_PORT: 8080
      WEBHOOK_PORT: 6969

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # - name: Update system packages
      #   run: sudo apt update

      # Cache Go modules to avoid downloading dependencies repeatedly
      # - name: Cache Go Modules
      #   uses: actions/cache@v3
      #   with:
      #     path: ~/go/pkg/mod
      #     key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
      #     restore-keys: |
      #       ${{ runner.os }}-go-

      # Cache Node.js dependencies
      # - name: Cache npm modules
      #   uses: actions/cache@v3
      #   with:
      #     path: ~/.npm
      #     key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
      #     restore-keys: |
      #       ${{ runner.os }}-node-

      # Cache GolangCI-Lint binary
      # - name: Cache GolangCI-Lint
      #   id: golangci-cache
      #   uses: actions/cache@v3
      #   with:
      #     path: /usr/local/bin/golangci-lint
      #     key: ${{ runner.os }}-golangci-lint-v1.55.2
      #     restore-keys: |
      #       ${{ runner.os }}-golangci-lint-

      # - name: Install Dependencies (Go, Node.js, ESLint, GolangCI-Lint, GitHub CLI)
      #   run: |
      #     sudo apt install -y golang nodejs npm gh
          
      #     # Install npm dependencies only if not cached
      #     if [ ! -d "~/.npm" ]; then
      #       npm install -g eslint
      #     fi

      #     # Install GolangCI-Lint only if not cached
      #     if [ ! -f "/usr/local/bin/golangci-lint" ]; then
      #       curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sudo sh -s -- -b /usr/local/bin v1.55.2
      #     fi

      - name: Setup Go environment
        uses: actions/setup-go@v4
        with:
          go-version: '1.20'

      - name: Start ngrok tunnel
        uses: LuisBoto/ngrok-tunnel-action@v0.1.7.2
        with:
          ngrok_authtoken: 2rqMCQpGwy8Hefx932ZJQCVS0U0_35MwNuTKQeaCf8Kst8LPL  # Using secret instead of hardcoding
          port: 6969
          tunnel_type: http
          timeout: 1h
          save_url_to_filename: ngrok_url.txt

      - name: Retrieve ngrok URL
        run: echo "NGROK_URL=$(cat ngrok_url.txt)" >> $GITHUB_ENV

      # - name: Authenticate GitHub CLI
      #   env:
      #     GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   run: gh auth status || gh auth login --with-token <<< "${{ secrets.GITHUB_TOKEN }}"


      # - name: Debug GH_TOKEN
      #   env:
      #     GH_TOKEN: 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
      #   run: |
      #     if [ -z "$GH_TOKEN" ]; then
      #       echo "GH_TOKEN is not set!"
      #       exit 1
      #     else
      #       echo "GH_TOKEN is set correctly."
          # fi

      - name: login now
        run: echo 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 | gh auth login --with-token
        
      # - name: mannual test
      #   run: |
      #       gh api /repos/Rocky9991905/UmV2aWV3/hooks --method POST \
      #         -f name='web' \
      #         -f config='{"url": "'"${NGROK_URL}/webhook"'", "content_type": "json"}' \
      #         -F events='["pull_request"]'



      - name: manual test
        run: |
          gh api /repos/Rocky9991905/UmV2aWV3/hooks --method POST --input <(jq -n \
            --arg url "${{ env.NGROK_URL }}/webhook" \
            '{"name": "web", "active": true, "events": ["pull_request"], "config": {"url": $url, "content_type": "json", "insecure_ssl": "0"}}')
              

      - name: Configure GitHub webhook
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Ensure GH_TOKEN is set
        run: |
          REPO_URL="https://api.github.com/repos/${{ github.repository }}/hooks"
          WEBHOOK_URL="${{ env.NGROK_URL }}/webhook"

          HOOK_ID=$(gh api $REPO_URL --jq '.[] | select(.config.url=="'"$WEBHOOK_URL"'") | .id' || echo "")

          if [ -z "$HOOK_ID" ]; then
            echo "Creating new webhook for PR events..."
            gh api --method POST $REPO_URL \
              -f name='web' \
              -f config='{"url": "'"$WEBHOOK_URL"'", "content_type": "json"}' \
              -f events='["pull_request"]'
          else
            echo "Updating existing webhook for PR events..."
            gh api --method PATCH $REPO_URL/$HOOK_ID \
              -f config='{"url": "'"$WEBHOOK_URL"'", "content_type": "json"}' \
              -f events='["pull_request"]'
          fi


      - name: Initialize Go module & Install Dependencies
        run: go mod tidy

      - name: Build Review Agent
        run: go build -o review-agent .

      - name: Start Review Agent
        env:
          PAT_OF_GITHUB: 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  # Using secret instead of hardcoding
        run: |
          nohup ./review-agent --pat "$PAT_OF_GITHUB" > agent.log 2>&1 &
          sleep 5  # Ensure the service has started

      - name: Display Agent Logs
        run: cat agent.log
